"main";_c64‍.x([["attemptSignIn",()=>attemptSignIn],["checkSignedIn",()=>checkSignedIn],["checkSignedOut",()=>checkSignedOut],["signOut",()=>signOut]]);let jwt;_c64‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);let AuthenticationError;_c64‍.w("apollo-server-express",[["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}]]);let User;_c64‍.w("./models",[["User",["User"],function(v){User=v}]]);let SESS_NAME,JWT_EMAIL,MAIL_ADDRESS;_c64‍.w("./config",[["SESS_NAME",["SESS_NAME"],function(v){SESS_NAME=v}],["JWT_EMAIL",["JWT_EMAIL"],function(v){JWT_EMAIL=v}],["MAIL_ADDRESS",["MAIL_ADDRESS"],function(v){MAIL_ADDRESS=v}]]);let transporter;_c64‍.w("./mail",[["transporter",["transporter"],function(v){transporter=v}]]);





       const attemptSignIn = async (email, password) => {
  const message = 'incorrect email or password. please try again.'
  const user = await User.findOne({ email })

  if (!user || !await user.matchesPassword(password)) {
    throw new AuthenticationError(message)
  }

  if (!user.isConfirmed === true) {
    const token = await jwt.sign({
      email: user.email,
      id: user.id
    },
    JWT_EMAIL,
    {
      expiresIn: '1d'
    })

    _c64‍.g.console.log(token)
    const mailOptions = {
      from: MAIL_ADDRESS,
      to: user.email,
      subject: 'Confirm Your Email.',
      html: `<p>Please confirm your email follow this link .. ${token}</p>`
    }
    await transporter.sendMail(mailOptions, (err, info) => {
      (err) ? new AuthenticationError('501 error') : _c64‍.g.console.log(info)
    })
    throw new AuthenticationError('please confirm your email')
  }

  return user
}

const signedIn = req => req.session.userId

       const checkSignedIn = req => {
  if (!signedIn(req)) {
    throw new AuthenticationError('you must be signed in.')
  }
}

       const checkSignedOut = req => {
  if (signedIn(req)) {
    throw new AuthenticationError('you must be signed out.')
  }
}

       const signOut = (req, res) => new Promise((resolve, reject) => {
  req.session.destroy(err => {
    if (err) reject(err)

    res.clearCookie(SESS_NAME)
    resolve(true)
  })
}
)
