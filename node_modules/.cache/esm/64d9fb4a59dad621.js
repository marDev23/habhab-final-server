"main";let Joi;_59d‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);let jwt;_59d‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);let UserInputError;_59d‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);let signUp,signIn;_59d‍.w("../schemas",[["signUp",["signUp"],function(v){signUp=v}],["signIn",["signIn"],function(v){signIn=v}]]);let JWT_EMAIL,MAIL_ADDRESS;_59d‍.w("./config",[["JWT_EMAIL",["JWT_EMAIL"],function(v){JWT_EMAIL=v}],["MAIL_ADDRESS",["MAIL_ADDRESS"],function(v){MAIL_ADDRESS=v}]]);let User,Message,Order,Cart;_59d‍.w("../models",[["User",["User"],function(v){User=v}],["Message",["Message"],function(v){Message=v}],["Order",["Order"],function(v){Order=v}],["Cart",["Cart"],function(v){Cart=v}]]);let transporter;_59d‍.w("../mail",[["transporter",["transporter"],function(v){transporter=v}]]);let Auth;_59d‍.w("../auth",[["*",null,function(v){Auth=v}]]);












_59d‍.d({
  User: {
    messages: async ({ id }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      const userMessage = await Message.find({ userId: id })
      return userMessage.map((x) => ({
        id: `${x._id}`,
        userId: x.userId,
        title: x.title,
        body: x.body,
        isOpened: x.isOpened
      }))
    },
    orders: async ({ id }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      const userOrder = await Order.find({ customerId: id })
      return userOrder.map((x) => ({
        id: `${x._id}`,
        customerId: x.customerId,
        orderStatusId: x.orderStatusId,
        orderTypeId: x.orderTypeId,
        datePlaced: x.datePlaced,
        datePickUp: x.datePickUp,
        isOpened: x.isOpened
      }))
    },
    cart: async ({ id }, args, context, info) => {
      const userCart = await Cart.find({ userId: id })
      return userCart.map((x) => ({
        id: `${x.id}`,
        productId: x.productId,
        quantity: x.quantity,
        userId: x.userId
      }))
    }

  },
  Query: {
    me: async (root, args, { req }, info) => {
      // projection
      Auth.checkSignedIn(req)
      const meData = await User.findById(req.session.userId)
      return {
        id: `${meData._id}`,
        name: meData.name,
        email: meData.email,
        mobile: meData.mobile
      }
    },
    users: (root, args, { req }, info) => {
      // TODO: auth, projection, pagination

      Auth.checkSignedIn(req)

      return User.find({})
    }

  },
  Mutation: {
    signUp: async (root, args, { req }, info) => {
      // TODO: not auth, validation

      Auth.checkSignedOut(req)

      await Joi.validate(args, signUp, { abortEarly: false })

      const user = await User.create(args)

      const token = await jwt.sign({
        email: user.email,
        JWT_EMAIL
      }, {
        expiresIn: '1d'
      })

      _59d‍.g.console.log(token)
      const mailOptions = {
        from: MAIL_ADDRESS,
        to: user.email,
        subject: 'Confirm Your Email.',
        html: `<p>Please confirm your email follow this link .. ${token}</p>`
      }
      await transporter.sendMail(mailOptions, (err, info) => {
        (err) ? new UserInputError('501 error') : _59d‍.g.console.log(info)
      })

      return true
    },
    signIn: async (root, args, { req }, info) => {
      const { userId } = req.session

      // Auth.checkSignedOut(req)
      if (userId) {
        return User.findById(userId)
      }
      await Joi.validate(args, signIn, { abortEarly: false })

      const user = await Auth.attemptSignIn(args.email, args.password)

      req.session.userId = user.id

      return user
    },
    signOut: (root, args, { req, res }, info) => {
      Auth.checkSignedIn(req)

      return Auth.signOut(req, res)
    },
    confirmEmail: async (root, args, context, info) => {

    }
  }
});
