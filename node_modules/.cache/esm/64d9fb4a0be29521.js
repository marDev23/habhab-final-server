"main";let Joi;_0be‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);let signUp,signIn;_0be‍.w("../schemas",[["signUp",["signUp"],function(v){signUp=v}],["signIn",["signIn"],function(v){signIn=v}]]);let User,Message,Order,Cart;_0be‍.w("../models",[["User",["User"],function(v){User=v}],["Message",["Message"],function(v){Message=v}],["Order",["Order"],function(v){Order=v}],["Cart",["Cart"],function(v){Cart=v}]]);let Auth;_0be‍.w("../auth",[["*",null,function(v){Auth=v}]]);








_0be‍.d({
  User: {
    messages: async ({ id }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      const userMessage = await Message.find({ userId: id })
      return userMessage.map((x) => ({
        id: `${x._id}`,
        userId: x.userId,
        title: x.title,
        body: x.body,
        isOpened: x.isOpened
      }))
    },
    orders: async ({ id }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      const userOrder = await Order.find({ customerId: id })
      return userOrder.map((x) => ({
        id: `${x._id}`,
        customerId: x.customerId,
        orderStatusId: x.orderStatusId,
        orderTypeId: x.orderTypeId,
        datePlaced: x.datePlaced,
        datePickUp: x.datePickUp,
        isOpened: x.isOpened
      }))
    },
    cart: async ({ id }, args, context, info) => {
      const userCart = await Cart.find({ userId: id })
      return userCart.map((x) => ({
        id: `${x.id}`,
        productId: x.productId,
        quantity: x.quantity,
        userId: x.userId
      }))
    }

  },
  Query: {
    me: async (root, args, { req }, info) => {
      // projection
      Auth.checkSignedIn(req)
      const meData = await User.findById(req.session.userId)
      return {
        id: `${meData._id}`,
        name: meData.name,
        email: meData.email
      }
    },
    users: (root, args, { req }, info) => {
      // TODO: auth, projection, pagination

      Auth.checkSignedIn(req)

      return User.find({})
    }

  },
  Mutation: {
    signUp: async (root, args, { req }, info) => {
      // TODO: not auth, validation

      Auth.checkSignedOut(req)

      await Joi.validate(args, signUp, { abortEarly: false })

      const user = await User.create(args)

      req.session.userId = user.id

      return user
    },
    signIn: async (root, args, { req }, info) => {
      const { userId } = req.session

      // Auth.checkSignedOut(req)
      if (userId) {
        return User.findById(userId)
      }
      await Joi.validate(args, signIn, { abortEarly: false })

      const user = await Auth.attemptSignIn(args.email, args.password)

      req.session.userId = user.id

      return user
    },
    signOut: (root, args, { req, res }, info) => {
      Auth.checkSignedIn(req)

      return Auth.signOut(req, res)
    }
  }
});
