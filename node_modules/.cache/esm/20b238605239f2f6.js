"main";let Joi;_523‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);let shortid;_523‍.w("shortid",[["default",["shortid"],function(v){shortid=v}]]);let order,items,shipment,invoice,myMessage;_523‍.w("../schemas",[["order",["order"],function(v){order=v}],["items",["items"],function(v){items=v}],["shipment",["shipment"],function(v){shipment=v}],["invoice",["invoice"],function(v){invoice=v}],["myMessage",["myMessage"],function(v){myMessage=v}]]);let Order,OrderItem,Shipment,Invoice,Message,Cart,User,OrderType,OrderStatus,Product,ItemStatus,Address;_523‍.w("../models",[["Order",["Order"],function(v){Order=v}],["OrderItem",["OrderItem"],function(v){OrderItem=v}],["Shipment",["Shipment"],function(v){Shipment=v}],["Invoice",["Invoice"],function(v){Invoice=v}],["Message",["Message"],function(v){Message=v}],["Cart",["Cart"],function(v){Cart=v}],["User",["User"],function(v){User=v}],["OrderType",["OrderType"],function(v){OrderType=v}],["OrderStatus",["OrderStatus"],function(v){OrderStatus=v}],["Product",["Product"],function(v){Product=v}],["ItemStatus",["ItemStatus"],function(v){ItemStatus=v}],["Address",["Address"],function(v){Address=v}]]);let placeOrderMail;_523‍.w("../mail-template",[["placeOrderMail",["placeOrderMail"],function(v){placeOrderMail=v}]]);let Auth;_523‍.w("../auth",[["*",null,function(v){Auth=v}]]);

// import mongoose from 'mongoose'
// import { UserInputError } from 'apollo-server-express'



















// import { transporter } from '../mail'
// import { MAIL_ADDRESS } from '../config'


_523‍.d({
  OrderData: {
    customer: async ({ customerId }, args, context, info) => {
      return User.findById(customerId)
    },
    orderStatus: ({ orderStatusId }, args, { req }, info) => {
      // Auth.checkSignedIn(req)
      return OrderStatus.findById(orderStatusId)
    },
    orderType: ({ orderTypeId }, args, { req }, info) => {
      // Auth.checkSignedIn(req)
      return OrderType.findById(orderTypeId)
    },
    orderShipment: async ({ id }, args, context, info) => {
      const shipmentData = await Shipment.findOne({ orderId: id })
      return {
        id: shipmentData.id,
        addressId: shipmentData.addressId
      }
    },
    orderInvoice: async ({ id }, args, context, info) => {
      // console.log(root)
      return Invoice.findOne({ orderId: id })
    }
  },
  OrderItemList: {
    order: async ({ orderId }, args, context, info) => {
      return Order.findById(orderId)
    },
    product: ({ productId }, args, { req }, info) => {
      // Auth.checkSignedIn(req)
      // console.log(productId)
      return Product.findById(productId)
    },
    itemStatus: ({ itemStatusId }, args, { req }, info) => {
      // Auth.checkSignedIn(req)
      // console.log(root)
      return ItemStatus.findById(itemStatusId)
    }
  },
  OrderShipment: {
    shipmentAddress: async ({ addressId }, args, context, info) => {
      return Address.findById(addressId)
    }
  },
  OrderItem: {
    itemStatus: ({ itemStatusId }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      return ItemStatus.findById(itemStatusId)
    },
    product: ({ productId }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      return Product.findById(productId)
    }
  },
  Order: {
    orderStatus: ({ orderStatusId }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      return OrderStatus.findById(orderStatusId)
    },
    orderType: ({ orderTypeId }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      return OrderType.findById(orderTypeId)
    },
    orderItems: ({ id }, args, { req }, info) => {
      Auth.checkSignedIn(req)
      return OrderItem.find({ orderId: id })
    },
    orderShipment: async ({ id }, args, context, info) => {
      const shipmentData = await Shipment.findOne({ orderId: id })
      return {
        id: shipmentData.id,
        addressId: shipmentData.addressId
      }
    },
    orderInvoice: async ({ id }, args, context, info) => {
      // console.log(root)
      return Invoice.findOne({ orderId: id })
    },
    customer: async ({ customerId }, args, context, info) => {
      return User.findById(customerId)
    }
  },
  Query: {
    orders: async () => {
      const resOrders = await Order.find({})
      return resOrders.map(({ _id, isOpened, customerId, orderTypeId, datePlaced, datePickUp }) => ({
        id: `${_id}`, isOpened, customerId, orderTypeId, datePlaced, datePickUp
      }))
    },
    order: async (root, args, context, info) => {
      // console.log(args.id)
      return Order.findById(args.id)
    },
    orderItemsList: async () => {
      return OrderItem.find({})
    },
    orderItem: async (root, { id }, context, info) => {
      return OrderItem.findById(id)
    }
  },
  Mutation: {
    placeOrder: async (root, args, { req }) => {
      Auth.checkSignedIn(req)
      const { input } = args

      const finalOrder = {
        customerId: req.session.userId,
        orderTypeId: args.orderTypeId,
        datePlaced: args.datePlaced,
        datePickUp: args.datePickUp
      }
      await Joi.validate(finalOrder, order, { abortEarly: false })
      const resolvedOrder = await Order.create(finalOrder)
      // console.log(resolvedOrder)
      const { id } = resolvedOrder
      const orderId = id

      const finalItem = input.map(({ productId, itemStatusId, quantity, price }) => ({
        orderId, productId, itemStatusId, quantity, price }))
      await Joi.validate(finalItem, items, { abortEarly: false })
      await OrderItem.insertMany(finalItem)

      const itemsIds = input.map(x => x.id)
      await Cart.deleteMany({ _id: { $in: itemsIds } })

      const finalShipment = { addressId: args.addressId, orderId }
      await Joi.validate(finalShipment, shipment, { abortEarly: false })
      await Shipment.create(finalShipment)

      const invoiceGen = await shortid.generate()
      const finalInvoice = {
        orderId,
        invoiceNumber: invoiceGen
      }
      await Joi.validate(finalInvoice, invoice, { abortEarly: false })
      await Invoice.create(finalInvoice)

      const finalMessage = {
        title: 'Thank you for shopping with us.',
        body: `Your Order# is ${orderId} and now has being processed`,
        userId: req.session.userId
      }
      await Joi.validate(finalMessage, myMessage, { abortEarly: false })
      await Message.create(finalMessage)

      const finalUser = await User.findById(req.session.userId)
      // const finalAddress = Address.findById.(args.addressId)
      // const freet = itemSaved.map((x) => ({ price: x.price})
      await placeOrderMail(finalUser, orderId, args)

      return { number: orderId }
    }
  }
});
