"main";let mongoose;_fd3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);let express;_fd3‍.w("express",[["default",["express"],function(v){express=v}]]);let session;_fd3‍.w("express-session",[["default",["session"],function(v){session=v}]]);let connectRedis;_fd3‍.w("connect-redis",[["default",["connectRedis"],function(v){connectRedis=v}]]);let ApolloServer;_fd3‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);let typeDefs;_fd3‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);let resolvers;_fd3‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);let APP_PORT,IN_PROD,DB_HOST,DB_NAME,SESS_NAME,SESS_SECRET,SESS_LIFETIME,REDIS_HOST,REDIS_PORT;_fd3‍.w("./config",[["APP_PORT",["APP_PORT"],function(v){APP_PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["DB_HOST",["DB_HOST"],function(v){DB_HOST=v}],["DB_NAME",["DB_NAME"],function(v){DB_NAME=v}],["SESS_NAME",["SESS_NAME"],function(v){SESS_NAME=v}],["SESS_SECRET",["SESS_SECRET"],function(v){SESS_SECRET=v}],["SESS_LIFETIME",["SESS_LIFETIME"],function(v){SESS_LIFETIME=v}],["REDIS_HOST",["REDIS_HOST"],function(v){REDIS_HOST=v}],["REDIS_PORT",["REDIS_PORT"],function(v){REDIS_PORT=v}]]);


















(async () => {
  try {
    await mongoose.connect(
      `mongodb://${DB_HOST}/${DB_NAME}`,
      { useNewUrlParser: true }
    )

    const app = express()

    app.disable('x-powered-by')

    const RedisStore = connectRedis(session)

    const store = new RedisStore({
      host: REDIS_HOST,
      port: REDIS_PORT
    })

    app.use(session({
      store,
      name: SESS_NAME,
      secret: SESS_SECRET,
      resave: false,
      saveUninitialized: false,
      cookie: {
        maxAge: SESS_LIFETIME,
        sameSite: true,
        secure: IN_PROD
      }
    }))

    const server = new ApolloServer({
      typeDefs,
      resolvers,
      cors: false,
      playground: IN_PROD ? false : {
        settings: {
          'request.credentials': 'include'
        }
      },
      context: ({ req, res }) => ({ req, res })
    })

    server.applyMiddleware({ app })

    app.listen({ port: APP_PORT }, () =>
      _fd3‍.g.console.log(`http://localhost:${APP_PORT}${server.graphqlPath}`)
    )
  } catch (e) {
    _fd3‍.g.console.error(e)
  }
})()
