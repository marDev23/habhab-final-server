"main";let Joi;_22c‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);let mongoose;_22c‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);let UserInputError;_22c‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);let createProductType;_22c‍.w("../schemas",[["createProductType",["createProductType"],function(v){createProductType=v}]]);let ProductType;_22c‍.w("../models",[["ProductType",["ProductType"],function(v){ProductType=v}]]);let Auth;_22c‍.w("../auth",[["*",null,function(v){Auth=v}]]);






_22c‍.d({
  Query: {
    productTypes: (root, args, context, info) => {
      // TODO: auth, projection, pagination

      return ProductType.find({})
    },
    productType: (root, { id }, context, info) => {
      // TODO: auth, projection, sanitization

      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new UserInputError(`${id} is not a valid user ID.`)
      }

      return ProductType.findById(id)
    }

  },
  Mutation: {
    createProductType: async (root, args, { req }, info) => {
      // TODO: not auth, validation
    //   console.log(args)
      Auth.checkSignedIn(req)
      await Joi.validate(args, createProductType, { abortEarly: false })

      return ProductType.create(args)
    }
  }
});
