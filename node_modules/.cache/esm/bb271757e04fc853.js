"main";let Joi;_e04‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);let mongoose;_e04‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);let UserInputError;_e04‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);let createProduct;_e04‍.w("../schemas",[["createProduct",["createProduct"],function(v){createProduct=v}]]);let Product,ProductType;_e04‍.w("../models",[["Product",["Product"],function(v){Product=v}],["ProductType",["ProductType"],function(v){ProductType=v}]]);let Auth;_e04‍.w("../auth",[["*",null,function(v){Auth=v}]]);






_e04‍.d({
  Product: {
    category: ({ categoryId }, args, context, info) => {
      return ProductType.findById(categoryId)
    }
  },
  Query: {
    products: (root, args, context, info) => {
      // TODO: auth, projection, pagination
      return Product.find({})
    },
    product: (root, { id }, context, info) => {
      // TODO: auth, projection, sanitization

      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new UserInputError(`${id} is not a valid user ID.`)
      }

      return Product.findById(id)
    }

  },
  Mutation: {
    createProduct: async (root, args, { req }, info) => {
      // TODO: not auth, validation
    //   console.log(args)
      Auth.checkSignedIn(req)
      await Joi.validate(args, createProduct, { abortEarly: false })

      return Product.create(args)
    }
  }
});
